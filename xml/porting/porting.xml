<?xml version="1.0" encoding="iso-8859-1"?>

<document filename="index">
<title>Porting Unix software to Darwin and Mac OS X</title>
<shorttitle>Porting</shorttitle>
<cvsid>$Id: porting.xml,v 1.3 2001/07/30 11:48:24 chrisp Exp $</cvsid>

<preface>
<p>
This document contains hints for porting Unix applications to Darwin
and Mac OS X.
The information here applies to Mac OS X version 10.0.x and Darwin
1.3.x.
Both systems will be referred to as Darwin, since Mac OS X is actually
a superset of Darwin.
</p>
</preface>


<chapter filename="basics">
<title>Basics</title>
<shorttitle>Basics</shorttitle>


<section name="heritage"><title>Where Darwin came from</title>
<p>
Darwin is a Unix-like operating system that evolved from NeXTStep /
OpenStep.
Lore has it that it was initially forked off 4.4BSD Lite.
The BSD heritage still shows, in fact Darwin was recently modernized
with code from FreeBSD and NetBSD.
</p>
<p>
Darwin's kernel is based on a combination of Mach 3.0, BSD, and
proprietary functionality like the object-oriented driver layer
IOKit.
Although Mach originally is a micro-kernel design, the BSD kernel that
sits on top of it is monolithic and the two are now so intertwined
that they must be regarded as a single monolithic kernel.
</p>
<p>
The user-space tools and libraries shipped with Darwin are mostly of
the BSD persuation, as opposed to the GNU tools you get with Linux.
Apple is not as strict as other BSDs though, and goes for useful
compromises.
For example, Apple ships both BSD make and GNU make, with GNU make
installed as the default.
</p>
</section>


<section name="compiler"><title>The Compiler and Tools</title>
<p>
Short story:
The compiler is a gcc derivate, but installed as <code>cc</code>;
you may have to patch Makefiles.
Most packages won't build shared libraries.
If you get errors related to macros, use the
<code>-no-cpp-precomp</code> option.
</p>
<p>
Long story:
The compiler tool chain in the Mac OS X Developer Tools is a strange
beast.
The compiler is based on the gcc 2.95.2 suite, with modifications to
support the Objective C language and some Darwin quirks.
The preprocessor (<code>cpp</code>) is available in two versions.
One is the standard precompiler (from gcc 2.95.2), the other one is a
special precompiler written by Apple, with support for precompiled
headers.
The latter one is used by default, because it is faster.
However, some code doesn't compile with Apple's precompiler, so you
must use the <code>-no-cpp-precomp</code> option to get the standard
precompiler.
(Note: I previously recommended the <code>-traditional-cpp</code>
option.
The semantics of this option have changed slightly with GCC 3,
breaking most packages that use it.
<code>-no-cpp-precomp</code> has the desired effect on both the
current Developer Tools and future compilers based on GCC 3.)
</p>
<p>
The assembler says it's based on gas 1.38.
The linker is not based on GNU tools.
This is a problem when building shared libraries, as GNU libtool and
configure scripts generated by it don't know how to handle Apple's
linker.
</p>
</section>


<section name="host-type"><title>Host type</title>
<p>
Short story:
If configure fails with 'Can't determine host type', copy config.guess
and config.sub from /usr/libexec into the current directory.
</p>
<p>
Long story:
The GNU world uses a canonical format to specify system types.
It has three parts: cpu type, manufacturer and operating system.
Sometimes a fourth part is added - then the third part denotes the
kernel, while the fourth denotes the operating system.
All parts are lower case and concatenated using dashes.
Some examples:
<code>i586-pc-linux-gnu</code>,
<code>hppa1.1-hp-hpux10.20</code>,
<code>sparc-sun-solaris2.6</code>.
The host type for Mac OS X 10.0 is
<code>powerpc-apple-darwin1.3</code>.
</p>
<p>
Many packages that use autoconf want to know the host type of the
system they are compiled on.
(Side note: to support cross-compiling and porting, there are actually
three types - the host type, the build type and the target type.
Usually, they're all the same.)
You can either pass the host type to the configure script as a
parameter or you can let it guess.
</p>
<p>
The configure script uses two companion scripts to determine host
types.
<code>config.guess</code> tries to guess the host type,
<code>config.sub</code> is used to validate and canonicalize the host
type.
These scripts are maintained as separate entities, but they are
included in every package that uses them.
Until very recently, these scripts didn't know about Darwin or Mac OS
X.
If you have a package that doesn't recognize Darwin, you must replace
the config.guess and config.sub included in the package.
Luckily, Apple put working versions in /usr/libexec, so you can just
copy them from there.
</p>
</section>


<section name="libraries"><title>Libraries</title>
<p>
Short story:
You can safely remove <code>-lm</code> from Makefiles, but you don't
need to.
</p>
<p>
Long story:
Mac OS X doesn't have separate libc, libm, libcurses, libpthread
etc. libraries.
Instead, they're all part of the system library, libSystem.
(In earlier versions, this actually was the System framework.)
However, Apple placed appropriate symlinks in /usr/lib, so linking
with <code>-lm</code> will work.
The only exception is <code>-lutil</code>.
On other systems, libutil contains functions related to
pseudo-terminals and login accounting.
These functions are in libSystem, but there is no symlink to provide a
libutil.dylib.
</p>
</section>


<section name="shared-libs"><title>Shared Libraries</title>
<p>
Short story:
Many packages need patched libtool scripts to build shared libraries.
</p>
<p>
Long story:
See the <xref chapter="libtool">libtool</xref> chapter.
</p>
</section>

</chapter>


<chapter filename="libtool">
<title>GNU libtool</title>
<shorttitle>libtool</shorttitle>

<preface>
<p>
GNU packages that build libraries use GNU libtool to hide
platform-dependent procedures for library building and installation.
</p>
</preface>

<section name="situation"><title>The Situation</title>
<p>
In the wild, one can find three strands of libtool:
</p>
<ul>

<li><p>
<em>libtool 1.3</em>:
The most common strand.
The last release from this branch is 1.3.5.
It doesn't know about Darwin and only builds static libraries.
It can be recognized by the presence of the files
<code>ltconfig</code> and <code>ltmain.sh</code> in the source tree.
</p></li>

<li><p>
<em>libtool 1.4</em>:
Long in the works and recently released as the new
stable version, this branch has better autoconf integration.
Unfortunately that makes migrating packages from 1.3 non-trivial.
It supports Darwin out of the box and can be recognized by the absence
of <code>ltconfig</code>.
Versions that identify themselves as 1.3b or 1.3d are actually
development snapshots of 1.4 and must be treated with caution.
</p></li>

<li><p>
<em>The multi-language-branch</em>:
Also called MLB, this version of libtool is still under development
and will some day be released as libtool 1.5.
It adds support for C++ and Java (via gcj).
It also supports Darwin out of the box.
It can be recognized by the files <code>ltcf-c.sh</code>,
<code>ltcf-cxx.sh</code> and <code>ltcf-gcj.sh</code>.
</p></li>

</ul>
<p>
In conclusion, libtool 1.3.x and packages that use it (which
happens to be the majority of libtool-using packages out there) need a
patch to build shared libraries on Darwin.
Apple includes a patched version of libtool 1.3.5 in Mac OS X, but it
will not work correctly in most cases.
I have improved that patch to hardcode the correct path and to do full
versioning.
This improved patch was later incorporated into libtool 1.4 and the
multi-language-branch.
The versioning scheme is compatible across all libtool versions.
</p>
<p>
Side note:
The libltdl library included with all libtool versions will only work
on Darwin when dlcompat is installed.
</p>
</section>


<section name="patch-135"><title>The 1.3.5 Patch</title>
<p>
After applying <link
url="http://fink.sourceforge.net/files/libtool-1.3.5-darwin.patch">this
patch</link> [updated 2001-06-12] to the libtool 1.3.5 source, you
must delete the files ltconfig and ltmain.sh.
They will be recreated from the appropriate .in files when you run
configure and make.
But that's only half the work - every package using libtool comes with
its own copies of ltconfig and ltmain.sh.
So you must replace these in every package that you want to build as a
shared library.
Note that you must do this before running the configure script.
For your convenience, you can get the two files right here:
<link url="http://fink.sourceforge.net/files/ltconfig">ltconfig</link> (98K) and
<link url="http://fink.sourceforge.net/files/ltmain.sh">ltmain.sh</link> (110K)
[both updated 2001-06-12].</p>
</section>


<section name="notes"><title>Further Notes</title>
<p>
For more information on libtool itself and what it does, see the <link
url="http://www.gnu.org/software/libtool/libtool.html">libtool
homepage</link>.
</p>

<p>
Side note:
Apple's Developer Tools contain a program also called libtool, which
is used by the compiler driver to build shared libraries.
However, this is completely unrelated with GNU libtool.
The GNU libtool that Apple ships is installed as <code>glibtool</code>
instead.
This can be achieved by configuring GNU libtool with
<code>--program-transform-name=s/libtool/glibtool/</code>.
</p>
</section>

</chapter>


</document>
