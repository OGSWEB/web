<?xml version="1.0" encoding="iso-8859-1"?>

<document filename="install">
<title>Fink 0.2.3 Installation</title>
<shorttitle>Installation</shorttitle>
<cvsid>$Id: install.xml,v 1.1 2001/07/06 20:01:53 chrisp Exp $</cvsid>

<preface>
<p>
These are the installation instructions for Fink version 0.2.3.
This document covers both first time installation and upgrading from a
previous version.
</p>
</preface>


<chapter filename="install-first">
<title>First Time Installation</title>
<shorttitle>First Time</shorttitle>

<section name="req"><title>Requirements</title>
<p>
You need:
</p>
<ul>
<li><p>
An installed Mac OS X system, version 10.0 or later.
Darwin 1.3.1 should also work, but this has not been tested.
Earlier versions of both will <em>not</em> work.
</p></li>
<li><p>
Development tools.
On Mac OS X, install the Developer.pkg package from the Developer
Tools CD.
On Darwin, the tools should be present in the default install.
</p></li>
<li><p>
Many other things that come with Mac OS X and the Developer Tools.
This includes perl 5.6, wget and autoconf.
</p></li>
<li><p>
Internet access.
All source code is downloaded from mirror sites.
</p></li>
<li><p>
Patience.
Compiling several big packages takes time.
I'm talking hours or even days here.
</p></li>
</ul>
</section>

<section name="directory"><title>Choosing A Directory</title>
<p>
Before you install, you must decide where Fink's directory hierarchy
will live. The recommended place is /sw, and all examples in this
document will use that. Any other directory should be fine as well, as
long as you don't use existing directories like /usr/local or
/usr. The bootstrap script tries to catch these.
</p>
<p>
A special note about /usr/local: While it is possible to install Fink
in /usr/local (and the bootstrap script will let you do that after a
confirmation), it is a bad idea. Many third party software packages
install into /usr/local. This can cause severe problems for Fink,
including overwriting files, dpkg refusing to install packages and
strange build errors. Also, the /usr/local hierarchy is in the default
search path for the shell and the compiler. That means that it is much
more difficult to get back to a working system when things break. You
have been warned.
</p>
</section>

<section name="install"><title>Installation</title>
<p>
The actual installation is performed by the perl script
bootstrap.pl. It is accompanied by a small shell script, bootstrap.sh,
which checks some basic requirements and then hands over control to
the perl script. So, to start installation, run this command:
</p>
<codeblock>./bootstrap.sh</codeblock>
<p>
After running some tests, the script will ask you what method should
be used to gain root privileges. The most useful choice is 'sudo'. On
a default install of Mac OS X, sudo is already enabled for the user
account created during installation. The script will immediately use
the method you choose to become root. This is required for the
installation.
</p>
<p>
Next, the script will ask you for the installation path. See
'Choosing A Directory' above for hints about this. The script will
create the directory and set it up for the bootstrap that will be done
later.
</p>
<p>
Next up is Fink configuration. This consists mainly of selecting
mirror sites for downloading.
</p>
<p>
Finally, the script has enough information to conduct the bootstrap
process. That means it will now download, build and install some
essential packages. Don't worry if you see some packages being
compiled twice. This is required because to build a binary package of
the package manager, you must have the package manager available.
</p>
</section>

<section name="x11"><title>Getting X11 Sorted Out</title>
<p>
Fink uses a virtual package to declare dependencies on X11. As there
are several X11 packages available for Mac OS X (Xfree86, Tenon
Xtools) and several ways to install them (manually or via Fink), there
are several actual packages - one for each setup. Fink is quite bad at
guessing what you have, so it's best to get this sorted out right at
the beginning. Here is a list of the available packages and
installation methods:
</p>
<ul>
<li><p>
xfree86-base: This package is the real thing. It will fetch the
XFree86 source, compile it and install it into /usr/X11R6. For
maximum flexibility, this package does not contain the actual
XDarwin server. To get it, you can install the xfree86-server
package. Or you can install it manually, for example using an
"XAqua" release from the XonX project (not useful right now as
those are older than XFree86 4.1.0) or one of the "rootless"
servers circulating the net.
</p></li>
<li><p>
system-xfree86: This package expects that you installed XFree86
manually, either from source or from the official binary
distribution. It will just check that the installation is useful
and then act as a dependency placeholder. Note that XFree86 4.0.2
or 4.0.3 will not pass the test. You need a version that builds
shared libraries. Usually that will be 4.1.0, but CVS versions not
older than a few months will also work.
</p></li>
<li><p>
system-xtools: Install this if you have Tenon's Xtools product
installed. Like system-xfree86, this will just do a sanity check
and leave the actual files alone.
</p></li>
</ul>
</section>

</chapter>


<chapter filename="install-up02">
<title>Upgrading From Fink 0.2.x</title>
<shorttitle>Upgrade from 0.2</shorttitle>

<p>
If you already have Fink 0.2.x installed, you can update your
installation to 0.2.3 with this package.
</p>
<p>
Actually, there are two pieces that are updated independently: the
package manager and the package descriptions. It is recommended to
update the package manager first.
</p>

<section name="packman"><title>Updating The Package Manager</title>
<p>
To update the package manager, run the inject.pl script in this
directory, like this:
</p>
<codeblock>./inject.pl</codeblock>
<p>
It will try to locate your Fink installation automatically. If it
can't find it, you can pass the path as a parameter, like this:
</p>
<codeblock>./inject.pl /sw</codeblock>
<p>
The script copies the package descriptions into the appropriate
directory, creates tarballs in /sw/src and then runs fink to install
the new versions of the fink and base-files packages.
</p>
</section>

<section name="descriptions"><title>Updating The Package Descriptions</title>
<p>
If you downloaded the fink-0.2.3-full tarball, the package
descriptions are in the subdirectory pkginfo. To install them, run the
inject.pl script in that directory:
</p>
<codeblock>cd pkginfo
./inject.pl</codeblock>
<p>
This inject.pl script works just like the one for the package
manager.
</p>
<p>
You can also grab the package descriptions as a separate tarball,
packages-0.2.3. If you did that, just unpack it and run the inject.pl
script inside.
</p>
</section>

<section name="x11"><title>Getting X11 Sorted Out</title>
<p>
The first thing you should do after updating the package descriptions
is getting the X11 dependencies settled. Refer to the "Getting X11
Sorted Out" section under "First Time Installation" above.
</p>
<p>
Note that if you used the xfree86-base package before Fink 0.2.2, you
may have to rebuild it to get correct dependency information. If you
have xfree86-base-4.1.0-1 (and exactly that version) installed, run:
</p>
<codeblock>fink rebuild xfree86-base</codeblock>
<p>
If you have an older version of the xfree86-base package, simply
update it to 4.1.0-1:
</p>
<codeblock>fink update xfree86-base</codeblock>
</section>

<section name="update-all"><title>Updating Packages</title>
<p>
The above updating steps will not update the actual packages, they
only provide you with the means to do so. The easiest way to get the
new packages is to use the 'update-all' command:
</p>
<codeblock>fink update-all</codeblock>
<p>
This will bring all installed packages to the latest version. If you
don't want to do this (it may take some time), you can update
individual packages with the 'update' command. But note that some
package require specific versions of the packages they depend
upon. Fink currently has no way to enforce this, so you may run into
problems.
</p>
</section>

<section name="other"><title>Other Notes</title>
<p>
IMPORTANT! When you update from Fink 0.2.0 or a CVS version before
0.2.1, the first thing you should do after running the inject.pl
scripts is this:
</p>
<codeblock>fink update dpkg</codeblock>
<p>
There was a bug in dpkg that could lead to partially extracted
packages. If you had unusual trouble with installed packages,
especially missing symlinks, use 'fink reinstall' on them to
re-install the .deb package files.
</p>
</section>

</chapter>


<chapter filename="install-up01">
<title>Upgrading From Fink 0.1.x</title>
<shorttitle>Upgrade from 0.1</shorttitle>

<p>
There is no direct upgrade path from Fink 0.1.x to Fink 0.2.x, because
they use different methods for underlying package management (stow
vs. dpkg). The only way to upgrade is to do a complete reinstall. The
procedure is as follows:
</p>
<ul>
<li><p>
Save any changes you have made to configuration files etc.
</p></li>
<li><p>
Save a list of packages you had installed. Hint: Try
'ls /sw/var/fink-stamp'.
</p></li>
<li><p>
If you have the source tarballs still lying around in /sw/src and
don't want to download them again, move them to another directory.
</p></li>
<li><p>
Wipe out the /sw directory, i.e. 'cd / ; rm -rf /sw'. Do this as
root if neccessary.
</p></li>
<li><p>
Follow the procedures for a first time installation above.
</p></li>
<li><p>
When you're asked for an 'additional directory for downloaded
tarballs', enter the directory you moved the tarballs to.
</p></li>
<li><p>
Reinstall the packages you need.
</p></li>
</ul>

</chapter>

</document>
