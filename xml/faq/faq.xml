<?xml version="1.0" encoding="iso-8859-1"?>

<document filename="index">
<title>The Fink F.A.Q.</title>
<shorttitle>F.A.Q.</shorttitle>
<cvsid>$Id: faq.xml,v 1.17 2001/10/13 09:09:23 chrisp Exp $</cvsid>

<preface>
<p>This is the list of frequently asked questions about Fink. Like
in most FAQs, some questions are taken from real life and some are
made up. It's really more like a documentation written in an ad-hoc,
question and answer style.</p>
<p>The FAQ consists of several pages, one for each section. All
questions are listed and linked in the table of contents below.</p>
</preface>


<chapter filename="general">
<title>General Questions</title>
<shorttitle>General</shorttitle>

<faqentry name="what"><question><p>What is Fink?</p></question>
<answer><p>Fink is actually two things in one (doesn't that sound great?
;-) ) - a compile-from-source package manager and a distribution of
Unix software for Mac OS X. The package manager is built on top of
dpkg, the binary package manager written by the <link
url="http://www.debian.org/">Debian GNU/Linux</link> project. (Older
versions of Fink used GNU stow.)</p>
</answer></faqentry>

<faqentry name="naming"><question><p>What does the name Fink stand for?</p></question>
<answer><p>Nothing, it's just a name. It's not even an acronym.</p>
<p>Well, actually Fink is the German name for Finch, a kind of
bird. I was looking for a name for the project, and the name of the
OS, Darwin, led me to think about Charles Darwin, the Galapagos
Islands and evolution. I remembered a piece about the so-called Darwin
Finches and their beaks from school, and well, that's it...</p>
</answer></faqentry>

<faqentry name="bsd-ports"><question><p>How is Fink different
from the BSD port mechanism (this includes OpenPackages and
GNU-Darwin)?</p></question>
<answer><p>Some main advantages:</p>
<ul>
<li><p>It's written in Perl, not make/shell. Thus it doesn't rely on
special features only found in BSD make. There is no need to flag
packages that need GNU make to build.</p></li>
<li><p>dpkg provides sophisticated management for binary packages -
smooth updating, special handling for configuration files, virtual
packages and other advanced dependencies.</p></li>
</ul>
</answer></faqentry>

<faqentry name="usr-local"><question><p>Why doesn't Fink install into
/usr/local?</p></question>
<answer><p>There are several reasons, but the common line is "because
breakage will occur".</p>
<p>Reason One: Third-party software. /usr/local is the
well-established place to put software that is not part of the system
shipped by the original vendor. This means that it is a good place to
put stuff. However, it also means that other people will put stuff
there, too. Most install routines will just overwrite what's there -
this also applies to dpkg. One can, of course, choose not to install
third-party software in /usr/local. Unfortunately, most installers
don't tell you beforehand what they will install where.</p>
<p>Reason Two: /usr/local/bin is in the default PATH. This means that
your shell will find the install programs without additional
measures. But it also means that you do have to take additional
measures if you do not want to use the programs. In extreme cases,
this can also affect the system itself - many parts depend on shell
scripts.</p>
<p>Reason Three: The compiler tool chain searches /usr/local by
default. The compiler searches /usr/local/include for header files and
the linker searches /usr/local/lib for libraries. Again, this is
sometimes a welcome convenience, but it's very hard to disable should
the need arise. You can easily disable the compiler by putting a
garbage file called <code>stdio.h</code> into /usr/local/include.</p>
<p>All that said, it is possible to install Fink into /usr/local. The
installation script will warn you explicitly, but proceed once you
acknowledge that you're doing this at your own risk.</p>
</answer></faqentry>

<faqentry name="why-sw"><question><p>Then why did you choose
/sw?</p></question>
<answer><p>That choice is quite arbitrary. If you have a better
suggestion, post it to the fink-devel mailing list. But you should be
aware of the arguments about /usr/local in the previous question.</p>
</answer></faqentry>



</chapter>



<chapter filename="relations">
<title>Relations with Other Projects</title>
<shorttitle>Relations</shorttitle>

<faqentry name="upstream"><question><p>Do you contribute your patches
back to the upstream maintainers?</p></question>
<answer>
<p>
We're trying to.
Sometimes sending patches back is easy and everyone is happy once the
next release of the package is out.
Unfortunately with most packages it's not that easy.
Some common problems:
</p>
<ul>
<li>The Fink package maintaner is very busy and doesn't have the time
to send the patch and accompanying explanations to the upstream
maintainers.</li>
<li>The upstream maintainers reject the patch. There are lots of valid
reasons for this. Most upstream maintainers have a strong interest in
clean code, clean configure checks, and compatibility with other
platforms.</li>
<li>The upstream maintainers accept the patch, but it takes some weeks
or months until they release a new version of their package.</li>
<li>The package has been abhandoned by the original authors and there
will be no new releases into which the patch could be merged.</li>
</ul>
</answer></faqentry>


<faqentry name="debian"><question><p>What is your relation with the
Debian project? Are you porting Debian Linux to Mac OS X?</p></question>
<answer>
<p>
There is no formal relation between Fink and
<link url="http://www.debian.org">Debian</link>.
Fink is <em>not</em> a port of the Debian GNU/Linux distribution.
We have ported Debian's package management tools (dpkg, dselect,
apt-get) though, and use these tools and the .deb binary package
format.
The actual packages are tailor-made for Mac OS X / Darwin and don't
use the Debian source package format.
</p>
</answer></faqentry>


<faqentry name="apple"><question><p>What is your relation with
Apple?</p></question>
<answer>
<p>
<link url="http://www.apple.com/">Apple</link> is aware of Fink and
has started to support us as part of their Open Source relations
efforts.
So far they are providing us with pre-release seeds of new Mac OS X
versions in the hope that Fink packages can be adapted in time for the
release.
Quote:
<i>"Hopefully it underscores the commitment that many suspect we're
not willing to provide.  We'll get better at the open source game over
time."</i>
Thanks Apple!
</p>
</answer></faqentry>


<faqentry name="openosx"><question><p>What is your relation with
OpenOSX.com?</p></question>
<answer>
<p>
Read this <link
url="http://fink.sourceforge.net/pr/openosx.php">public
statement</link>.
</p>
</answer></faqentry>


</chapter>


<chapter filename="install">
<title>Installation Questions</title>
<shorttitle>Installation</shorttitle>

<faqentry name="proxy"><question><p>I'm behind a firewall. How do I
configure Fink to use an HTTP proxy?</p></question>
<answer>
<p>
Fink 0.2.3 and later ask you for proxy and firewall settings on
installation.
If you're upgrading from an older version, run <code>fink
configure</code> to be asked these questions.
</p>
</answer></faqentry>

<faqentry name="head"><question><p>I'm getting a strange usage message
from the head command. What's broken?</p></question>
<answer><p>If you're seeing this:</p>
<codeblock>Unknown option: 1
Usage: head [-options] &lt;url&gt;...</codeblock>
<p>followed by a list of options, you have a broken <code>head</code>
executable.
This happens when you install the Perl libwww library on an HFS+
system volume.
It tries to create a new command <code>/usr/bin/HEAD</code>, which
overwrites the existing <code>head</code> command because the file
system is case-insensitive.
<code>head</code> is a standard command used in many shell scripts and
Makefiles.
You need to get the original <code>head</code> executable back if you
want to use Fink.
</p>
<p>
Future releases of Fink will check the system before the bootstrap
starts to catch this error.
</p>
</answer></faqentry>

<faqentry name="moving"><question><p>Can I move Fink to another
location after installation?</p></question>
<answer>
<p>
No.
Well, of course you can move the files using mv or the Finder, but 99%
of the programs will stop working when you do.
That's because basically all Unix software depends on hardcoded paths
to find data files, libraries and other stuff.
</p>
</answer></faqentry>

<faqentry name="moving-symlink"><question><p>If I move Fink after
installation and provide a symlink from the old location, will it
work?</p></question>
<answer>
<p>
Maybe.
The general expectation is that it should work, but there may be
hidden traps somewhere.
</p>
</answer></faqentry>

</chapter>



<chapter filename="usage">
<title>Usage Questions</title>
<shorttitle>Usage</shorttitle>

<faqentry name="what-packages"><question><p>How can I find out what packages Fink supports?</p></question>
<answer>
<p>
Since Fink 0.2.3, there is the <code>list</code> command.
It produces a list of all packages known to your Fink installation.
Example:
</p>
<codeblock>fink list</codeblock>
<p>
If you're using the binary distribution, <code>dselect</code> gives
you a nice browsable listing of available packages.
Note that you must run it as root if you want to select and install
packages from withing dselect.
</p>
<p>
There's also the <link url="http://fink.sourceforge.net/pdb/">package
database</link> at the website.
</p>
</answer></faqentry>

<faqentry name="unstable"><question><p>There's this package in
unstable that I want to install, but Fink just says 'no package
found'. How can I install it?</p></question>
<answer>
<p>
First make sure you understand what 'unstable' means.
Packages in there usually have not been tested at all, many have
problems or just won't compile.
That is why Fink doesn't search the unstable tree by default.
</p>
<p>
If you only want one or two specific packages, it is safer to copy
those .info files (and their associated .patch files, if there are
any) from <filename>/sw/fink/dists/unstable/main/finkinfo</filename>
to <filename>/sw/fink/dists/local/main/finkinfo</filename>.
If you want Fink to use all of unstable, edit
<filename>/sw/etc/fink.conf</filename> and add
<literal>unstable/main</literal> to the <literal>Trees:</literal>
line.
</p>
</answer></faqentry>

<faqentry name="sudo"><question><p>I'm tired of typing my password into sudo again
and again. Is there a way around this?</p></question>
<answer><p>If you're not paranoid, you can configure sudo to not ask you for a
password. To do this, edit <filename>/etc/sudoers</filename> as root
and add a line like this:</p>
<codeblock>username  ALL = NOPASSWD: ALL</codeblock>
<p>Replace <literal>username</literal> with your actual username, of course. This
line allows you to run any command via sudo without typing your
password.</p>
</answer></faqentry>

<faqentry name="exec-init-csh"><question><p>When I try to run
init.csh, I get a "Permission denied" error. What am I doing
wrong?</p></question>
<answer><p>init.csh is not supposed to be run like normal commands. It
sets environment variables like PATH and MANPATH in your shell. To
have a lasting effect on the shell, it must be processed with the
<code>source</code> command, like this:</p>
<codeblock>source /sw/bin/init.csh</codeblock>
<p>The same goes for Bourne-type shells and init.sh.</p>
</answer></faqentry>

</chapter>



<chapter filename="packages">
<title>Problems With Certain Packages</title>
<shorttitle>Packages</shorttitle>

<faqentry name="kde"><question><p>Why are there no packages for
KDE?</p></question>
<answer>
<p>
Because there simply are none.
</p>
<p>
Seriously, KDE has (or at least had) serious problems that prevent a
port to Mac OS X.
It assumes it can do things with shared libraries that are only
possible on ELF systems like Linux, *BSD and Solaris.
It could very well be that some people are trying to port it
nevertheless, but we haven't heard of any breakthroughs yet.
Note that Qt is a different story, we have a package for it and it
works fine.
</p>
</answer></faqentry>

<!--
<faqentry name="nox"><question><p>Package foo says there is no X11 on my system!?</p></question>
<answer><p>There are several things that can cause this:</p>
<ul>
<li><p>You don't have X11 installed. You must install X11 manually,
either <link url="http://www.xfree86.org/">XFree86</link> or <link
url="http://www.tenon.com/">Xtools</link>. XFree86 packages for Fink are
under development, but not yet ready for prime time.</p></li>
<li><p>You installed the XFree86 binary distribution, but left out the
Xprog.tgz tarball. It is an optional tarball, but must be installed to
compile X11 applications.</p></li>
<li><p>You installed XFree86 4.0.2 or 4.0.3 and used ranlib on the
static libraries. Now configure scripts are failing in the
<code>checking for XOpenDisplay in -lX11</code> test. To fix this, use the
<code>-c</code> option for ranlib, i.e.:</p>
<codeblock>cd /usr/X11R6/lib
sudo ranlib -c *.a</codeblock>
<p>Note that this can't happen with more recent versions of XFree86, as
they compile the libraries (both static and shared) without common
symbols.</p></li>
</ul>
<p>Hopefully, this will soon be solved with proper X11 packages and
dependencies. But don't hold your breath yet.</p>
</answer></faqentry>
-->

<faqentry name="nedit"><question><p>nedit is broken.</p></question>
<answer><p>If you're seeing <code>Xm/BulletinB.h: No such file or
directory</code> in the error messages, that's because you have Xtools
installed. Xtools includes OpenMotif, but unfortunately Tenon forgot
to include some required header files. There is no workaround yet, and
it is unknown whether this is fixed in recent releases on Xtools.</p>
</answer></faqentry>

<faqentry name="gnome-panel"><question><p>The GNOME panel displays
black icons only. What's wrong?</p></question>
<answer>
<p>
This is caused by limitations in the operating system kernel.
The only solution so far is to turn off shared memory.
The Running X11 document has <link url="http://fink.sourceforge.net/doc/x11/trouble.php#black">details</link>.
</p>
</answer></faqentry>

<faqentry name="gnome-libs-db"><question><p>gnome-libs complains about
dbopen and lots of other stuff.</p></question>
<answer>
<p>
This can happen when you manually installed Berkeley DB 3 without
backward compatibility.
gnome-libs expects to find a DB 1.86 compatible interface.
Remove the DB 3 installation from /usr/local or replace it with one
that has DB 1.86 compatibility.
</p>
</answer></faqentry>

<faqentry name="libiconv"><question><p>libiconv fails with errors that
mention ANSI C++.</p></question>
<answer>
<p>
This happens when you link <code>gcc</code> to <code>c++</code>.
That causes all C code to be compiled as C++ code.
Unfortunately, C allows some things that C++ doesn't allow.
You should remove the symlink you created, or at least link it to
<code>cc</code> instead.
</p>
</answer></faqentry>

<faqentry name="xlocale"><question><p>I'm getting lots of messages
like "locale not supported by C library". Is that bad?</p></question>
<answer>
<p>
It's not bad, it just means that the program will use the default
English messages, date formats, etc.
The program will function normally otherwise.
The Running X11 document has <link url="http://fink.sourceforge.net/doc/x11/trouble.php#locale">details</link>.
</p>
</answer></faqentry>

<faqentry name="xmms-quiet"><question><p>I get no sound from
XMMS</p></question>
<answer>
<p>
Make sure you have the "eSound Output Plugin" selected in the XMMS
preferences.
For some strange reason, it selects the disk writer plugin as the
default.
</p>
<p>
If you still get no sound output or XMMS complains that it can't find
your sound card try this:
</p>
<ul>
<li>Make sure you haven't muted sound output in Mac OS X.</li>
<li>Run <code>esdcat /usr/libexec/config.guess</code> (or any other
file of a decent size).
If you hear a short noise, esound works and XMMS should work too if
it's configured correctly.
If you don't hear anything, esd isn't working for some reason.
You can try to start it up manually with <code>esd &amp;</code> and watch
the messages.
</li>
<li>
If it still doesn't work, check the permissions on
<code>/tmp/.esd</code> and <code>/tmp/.esd/socket</code>.
Those should have your normal user account as the owner.
If they aren't owned by you, kill esd if it's running, remove the
directory as root (<code>sudo rm -rf /tmp/.esd</code>), then start esd
again (as a normal user, not as root).
</li>
</ul>
<p>
Note that esd is designed to be run by a normal user, not by root.
It usually communicates via the file system socket
<code>/tmp/.esd/socket</code>.
You only need the <code>-tcp</code> and <code>-port</code> switches if
you want to run esd clients on another machine over the network.
</p>
</answer></faqentry>

<faqentry name="gnome-terminal"><question><p>Why won't gnome-terminal
start up?</p></question>
<answer>
<p>
There is a bug in Mac OS X 10.0.x that keeps gnome-terminal from
working.
The actual bug (file descriptior passing doesn't work) is masked by
another issue (ununual stack size limit), which was left as is to
produce an error message when gnome-terminal is started (thus
preventing even more confusion).
It is expected that this will be fixed in Mac OS X 10.1.
</p>
</answer></faqentry>

<faqentry name="xfree-keymapping"><question><p>I just upgraded to Mac
OS X 10.1 and now XFree86 always quits immediately. In the messages it
says "assert failed on line 454 of darwinKeyboard.c!". What's
wrong?</p></question> 
<answer>
<p>
This is a known problem on 10.1.
You must use the "Load from file" keymapping option since the default
option (loading it from the kernel) doesn't work anymore.
The setting is in the XDarwin Preferences dialog.
Be sure that a file is selected (e.g. USA.keymapping) - simply
activating the check box may not be sufficient with some versions.
If you can't get to the Preferences dialog because you disabled all
splash screens, you can delete
<code>~/Library/Preferences/org.xfree86.XDarwin.plist</code> to get it
back, then start XDarwin and go to the Preferences dialog while the
splash screen is displayed.
Alternatively, you can edit that file manually in a text editor to
enable the keymapping option (the UseKeymappingFile and KeymappingFile
bits).
</p>
<p>
As a last resort, you can run <code>startx -- -quartz -keymap
USA.keymapping</code> from Terminal.app.
If this still doesn't work, you have another problem in addition to
the keymapping problem that prevents XDarwin from starting.
You'll get a bunch of diagnostic messages in Terminal.app to help you
sort this out.
</p>
</answer></faqentry>


</chapter>


</document>
