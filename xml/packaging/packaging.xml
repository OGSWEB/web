<?xml version="1.0" encoding="iso-8859-1"?>

<document filename="index">
<title>Creating Fink Packages</title>
<shorttitle>Packaging</shorttitle>
<cvsid>$Id: packaging.xml,v 1.6 2001/07/14 14:20:49 chrisp Exp $</cvsid>

<preface>
<p>
This manual documents how to create package descriptions for the Fink
package manager.
It also provides a policy and guidelines for the Fink distribution.
Both the description format and the distribution policy are still
evolving, so watch the "Last changed" info and the CVS tag on this
page to detect updates.
What you're reading right now is a description of the format and
policy used in post-0.2.3 development versions of Fink.
</p>
<p>
If you create packages for Fink, you may want to subscribe to the
<link url="http://lists.sourceforge.net/lists/listinfo/fink-devel">fink-devel</link>
mailing list.
</p>
</preface>


<chapter filename="intro">
<title>Introduction</title>
<shorttitle>Intro</shorttitle>


<section name="def1"><title>What is a Package?</title>
<p>
A package is a piece of software that forms an atomic unit.
A typical package contains an executable program, the data files it
needs, message catalogs for internationalisation and documentation.
In Fink, packages can exist in two forms: the package description
and the ready-to-install binary package file.
</p>
<p>
The package description is a human readable text file that contains
everything needed to build a package, i.e. to create the binary
package file.
The information includes meta-data (like the package's name and a prose
description of its purpose), the URL of the source code and the
instructions necessary to configure, compile and wrap up the package.
The description may be accompanied by a patch file.
</p>
<p>
A binary package file is a file archive that contains the actual files
that make up the package,
i.e. executables, data files, message catalogs, libraries, include
files, etc.
The package file also contains some meta-data for the package.
Installing a binary package mainly consists of unpacking its contents
as it is already in an ready-to-use form.
Since Fink builds on the dpkg package manager, the binary package
files are in the dpkg format and have the extension .deb.
</p>
</section>


<section name="ident"><title>Identifying a Package</title>
<p>
A package is identified by three strings: the package name, the
version and the revision.
All of these may contain lower-case letters (a-z), numbers (0-9),
dashes (-) and dots (.).
Other characters are not allowed.
In particular, capital letters and underscores are not allowed.
</p>
<p>
The package name is simply the name of the software, e.g. openssh.
The version, also called the upstream version, is the version
identifier of the original software package.
It is okay to use letters in the version, e.g. 2.9p1.
Both fink and dpkg know how to sort these correctly.
The revision is a counter that is increased when the package
description changes.
It starts at 1 and should be reset to 1 when the upstream version
changes.
The full name of a package is all three items concatenated, with
dashes in between, e.g. openssh-2.9p1-2.
</p>
</section>

</chapter>


<chapter filename="format">
<title>Package Descriptions</title>
<shorttitle>Package Descriptions</shorttitle>

<section name="trees"><title>Tree Layout</title>
<p>
Package descriptions are read from the <code>finkinfo</code>
directories below the <code>/sw/fink/dists</code> directory.
The "Trees" setting in <code>/sw/etc/fink.conf</code> controls which
directories are read.
The name of package description files must be the full package name
plus the extension ".info".
</p>
<p>
The package description tree is organized with several levels of
directories.
The directories in top-down order:
</p>
<ul>
<li><code>dists</code> is where is starts. The <code>dists</code>
directory is necessary for the Debian tools.</li>
<li>The distribution. There is <code>stable</code>,
<code>unstable</code> and <code>local</code>. The <code>local</code>
directory is under the control of the local administrator/user. The
<code>stable</code> and <code>unstable</code> directores are part of
Fink.</li>
<li>The tree. The <code>main</code> tree contains the bulk of the
packages. Cryptographic software is kept in a separate tree,
<code>crypto</code>, to make removal easy should it become
necessary.</li>
<li><code>finkinfo</code>
vs. <code>binary-darwin-powerpc</code>. <code>finkinfo</code> contains
the Fink package descriptions and patches, while
<code>binary-darwin-powerpc</code> contains the <code>.deb</code>
binary packages.</li>
<li>Sections. The <code>main</code> tree is subdivided into thematic
sections to make it manageable. The <code>crypto</code> tree is not
divided into sections at the moment.</li>
</ul>
</section>

<section name="format"><title>File Format</title>
<p>
The description files are simple lists of key-value pairs, also called
'fields'.
The format is based on the popular RFC 822 header format.
Each line starts with a key, terminated by a colon (:) and followed by
the value, like this:
</p>
<codeblock>Key: Value</codeblock>
<p>
There are two notations for fields that must span multiple lines.
The traditional notation is crafted after the RFC 822 header folding
method.
A line that starts with whitespace is treated as a continuation of the
previous line.
Example:
</p>
<codeblock>InstallScript: mkdir -p %i/share/man
 make install prefix=%i mandir=%i/share/man
 mkdir -p %i/share/doc/%n
 install -m 644 COPYING %i/share/doc/%n</codeblock>
<p>
Note the indentation of the lines.
</p>
<p>
The more recent alternative notation is based on the here-document
syntax in shell scripts.
The first line consists of the key, followed by <code>&lt;&lt;</code>
as the value.
All following lines are treated as the actual value, until a line with
just <code>&lt;&lt;</code> on it is encountered.
The example from above now looks like this:
</p>
<codeblock>InstallScript: &lt;&lt;
mkdir -p %i/share/man
make install prefix=%i mandir=%i/share/man
mkdir -p %i/share/doc/%n
install -m 644 COPYING %i/share/doc/%n
&lt;&lt;</codeblock>
<p>
Note the lack of indentation and the terminating
<code>&lt;&lt;</code>.
</p>
<p>
Empty lines and lines starting with a hash (#) are ignored.
Keys (field names) are case-insensitive in Fink, so you can write
<code>InstallScript</code>, <code>installscript</code> or
<code>INSTALLSCRIPT</code> as you please.
The first form is preferred for readability, though.
Some fields take a boolean value - any of "true", "yes", "on", "1"
(case-insensitive) are treated as true, all other values are treated
as false.
</p>
</section>

<section name="percent"><title>Percent Expansion</title>
<p>
To make life easier, Fink supports a set of expansions that are
performed on some fields.
The available expansions are:
</p>
<dl>
<dt>%n</dt><dd>the package <em>n</em>ame</dd>
<dt>%v</dt><dd>the package <em>v</em>ersion</dd>
<dt>%r</dt><dd>the package <em>r</em>evision</dd>
<dt>%f</dt><dd>the <em>f</em>ull package name, i.e. %n-%v-%r</dd>
<dt>%p</dt><dd>the <em>p</em>refix where Fink is installed, e.g. /sw</dd>
<dt>%d</dt><dd>the <em>d</em>estination directory where the tree to be
packaged is built, e.g. /sw/src/root-gimp-1.2.1-1</dd>
<dt>%i</dt><dd>the full <em>i</em>nstall-phase prefix, equivalent to %d%p</dd>
<dt>%a</dt><dd>the path where the p<em>a</em>tches can be found</dd>
<dt>%c</dt><dd>the parameters for <em>c</em>onfigure:
<code>--prefix=%p</code> plus anything specified with
ConfigureParams</dd>
</dl>

</section>

</chapter>


<chapter filename="policy">
<title>Packaging Policy</title>
<shorttitle>Policy</shorttitle>

<section name="licenses"><title>Package Licenses</title>
<p>
The packages included in Fink come with a wide variety of licenses.
Most of them place restrictions on redistributing the full source and
especially on distributing binaries.
Some packages can not be included in the binary distribution of Fink
because of these license restrictions.
Thus it is very important that package maintainers check the license
of their package.
</p>
<p>
Every package that is to be distributed as a binary package must
contain a copy of the license.
It must be installed in the doc directory,
i.e. in <code>%p/share/doc/%n</code>.
If there is no explicit license in the original source, include a
small text file with a note about the status of the package.
Note that most licenses require that the license accompanies any
distribution, but Fink's policy is to do this even if it is not
explicitly required.
</p>
<p>
To make an automated maintenance of the binary distribution possible,
any package that is to be distributed must have a <code>License</code>
field.
This field denotes the nature of the license and is used to decide
which packages make it into the binary distribution and which must be
held back.
The field may only be present if the actual license terms are included
in the binary package, as explained above.
</p>
<p>
To make the <code>License</code> field useful, only one of the
following pre-defined values may be used.
If you're packaging something that doesn't fit into these categories,
ask for help on the developer mailing list.
</p>
<ul>

<li><code>GPL</code> - the GNU General Public License.
This license requires that the source is available from the same place
as the binary.</li>
<li><code>LGPL</code> - the GNU Lesser General Public License.
This license requires that the source is available from the same place
as the binary.</li>
<li><code>GPL/LGPL</code> - this if a special case for packages where
one part is licensed under the GPL (e.g. the executables) and another
part is licensed under the LGPL (e.g. the libraries).</li>

<li><code>BSD</code> - for BSD-style licenses.
This includes the so-called "original" BSD license, the "modified" BSD
license and the MIT license. The Apache license also counts as
BSD. With these licenses the distribution of source code is
optional.</li>

<li><code>Artistic</code> - for the Artistic license and
derivatives.</li>

<li><code>OSI-Approved</code> - for other Open Source licenses
approved by the <link url="http://www.opensource.org/">Open Source
Initiative</link>. One of OSI's requirements is that free distribution
of binaries and sources is allowed.</li>

<li><code>Restrictive</code> - for restrictive licenses.
Use this for packages that are available from the author in source
form for free use, but don't allow free redistribution.</li>

<li><code>Commercial</code> - for restrictive, commercial licenses.
Use this for commercial packages (e.g. Freeware, Shareware) that do
not allow free redistribution of source or binaries.</li>

</ul>
</section>


<section name="prefix"><title>Base System Interference</title>
<p>
Fink is an add-on distribution that is installed in a directory
separate from the base system.
It is crucial that a package does not install files outside of Fink's
directory.
</p>
<p>
Exceptions can be made when there is no other possibility, e.g. with
XFree86.
In this case the package must check for existing files before
installation and refuse to install if it would overwrite existing
files.
The package must make sure that all files it installed outside of the
Fink directory are deleted when the package is removed.
</p>
</section>


</chapter>


<chapter filename="fslayout">
<title>Filesystem Layout</title>
<shorttitle>FS Layout</shorttitle>


<preface>
<p>
The following file system layout guidelines are part of the Fink
packaging policy.
</p>
</preface>


<section name="fhs"><title>The Filesystem Hierarchy Standard</title>
<p>
Fink follows the spirit of the <link
url="http://www.pathname.com/fhs/">Filesystem Hierarchy
Standard</link>, or FHS for short.
It can only follow it in spirit because the FHS was created for system
vendors that have control over the <code>/</code> and
<code>/usr</code> hierarchies.
Fink is an add-on distribution that controls only its install
directory (or prefix).
The examples use the default prefix of <code>/sw</code>.
</p>
</section>

<section name="dirs"><title>The Directories</title>
<p>
Files should go into the following subdirectories of the hierarchy:
</p>

<itemtable>

<item><itemt><code>/sw/bin</code></itemt>
<itemd>
<p>
This directory is for general executable programs.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><code>/sw/sbin</code></itemt>
<itemd>
<p>
This directory is for executable programs that are intended to be used
by administrators only.
Background daemons go here.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><code>/sw/include</code></itemt>
<itemd>
<p>
This directory is for C and C++ header files.
Subdirectories can be created as necessary.
If a package installs header files that can be confused with standard
C headers, those headers <em>must</em> go to a subdirectory.
</p>
</itemd></item>

<item><itemt><code>/sw/lib</code></itemt>
<itemd>
<p>
This directory is for architecture-dependend data files and
libraries.
Static and shared libraries should be placed directly in
<code>/sw/lib</code> unless there is a good reason not to.
This is also the place for executables that should not be executed
directly by the user.
</p>
<p>
A package is free to create a subdirectory to store private data or
loadable modules.
Make sure to use directory names that make sense for compatibility.
It is wise to use the package major version in the directory name or
as an additional hierarchy level, e.g. <code>/sw/lib/perl5</code> or
<code>/sw/lib/apache/1.3</code>.
Care should be taken when the host type is used to create
directories.
A <code>powerpc-apple-darwin1.3.3</code> directory is bad for
compatibility, <code>powerpc-apple-darwin1.3</code> or just
<code>powerpc-apple-darwin</code> are better choices.
</p>
</itemd></item>

<item><itemt><code>/sw/share</code></itemt>
<itemd>
<p>
This directory is for architecture-independent data files.
The same rules as for <code>/sw/lib</code> apply.
Some common subdirectories are described below.
</p>
</itemd></item>

<item><itemt><code>/sw/share/man</code></itemt>
<itemd>
<p>
This directory contains manual pages.
It is organized into the usual section tree.
Every program in <code>/sw/bin</code> and <code>/sw/sbin</code> should
have an associated manual page here.
</p>
</itemd></item>

<item><itemt><code>/sw/share/info</code></itemt>
<itemd>
<p>
This directory contains documentation in the info format (produced
from Texinfo sources).
Maintenance of the <code>dir</code> file is still to be determined.
Fink makes sure that no package installs a <code>dir</code> file of
its own.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><code>/sw/share/doc</code></itemt>
<itemd>
<p>
This directory contains documentation that is neither a man page nor
an info document.
README, LICENSE and COPYING files go here.
Every package must create a subdirectory here, named after the
package.
The subdirectory name must not contain any version numbers (unless
they are a part of the package name proper).
</p>
</itemd></item>

<item><itemt><code>/sw/share/locale</code></itemt>
<itemd>
<p>
This directory contains message catalogs for internationalization.
</p>
</itemd></item>

<item><itemt><code>/sw/var</code></itemt>
<itemd>
<p>
The <code>var</code> directory stores variable data.
This includes spool directories, lock files, state databases, game
high scores and log files.
</p>
</itemd></item>

<item><itemt><code>/sw/etc</code></itemt>
<itemd>
<p>
This directory holds configuration files.
For packages that have more than one or two files here a subdirectory
should be made.
The subdirectory must have the name of the package or program in it so
that it is identifyable.
</p>
</itemd></item>

<item><itemt><code>/sw/src</code></itemt>
<itemd>
<p>
This directory is for storing and building source code.
Nothing should be installed here by a package.
</p>
</itemd></item>

</itemtable>
</section>


<section name="avoid"><title>Things to Avoid</title>
<p>
No other directories than the ones mentioned above should exist
in /sw.
In particular, the following should not be used: /sw/man, /sw/info,
/sw/doc, /sw/libexec.
</p>
</section>


</chapter>


<chapter filename="reference">
<title>Reference</title>
<shorttitle>Reference</shorttitle>


<section name="build"><title>The Build Process</title>

<p>To understand some of the fields, you need some knowledge of the
build process Fink uses. It consists of five phases: unpack, patch,
compile, install and build. The example paths below are for an
installation in /sw and the package gimp-1.2.1-1.</p>
<p>In the <em>unpack phase</em> the directory /sw/src/gimp-1.2.1-1 is created
and the source tarball(s) are unpacked there. In most cases, this will
create a directory gimp-1.2.1 with the source in it; all following
steps will be executed in that directory
(i.e. /sw/src/gimp-1.2.1-1/gimp-1.2.1). Details can be controlled with
the SourceDirectory, NoSourceDirectory and Source<i>N</i>ExtractDir
fields.</p>
<p>In the <em>patch phase</em> the source is patched so that it will
build on Darwin. The actions specified by the UpdateConfigGuess,
UpdateLibtool, Patch and PatchScript fields will be executed, in that
order.</p>
<p>In the <em>compile phase</em> the source is configured and
compiled. Usually this means calling the <code>configure</code> script
with some parameters and then issuing a <code>make</code> command. See the
ConfigureScript field description for details.</p>
<p>In the <em>install phase</em> the package is installed to a temporary
directory, /sw/src/root-gimp-1.2.1-1 (= %d). (Note the "root-" part.)
All files that would normally be installed to /sw are installed in
/sw/src/root-gimp-1.2.1-1/sw (= %i = %d%p) instead. See the
InstallScript field description for details.</p>
<p>In the <em>build phase</em> a binary package file (.deb) is built
from the temporary directory. You can't influence this step directly,
but various information from the package description is used to
generate a <code>control</code> file for dpkg.</p>
</section>

<section name="fields"><title>Fields</title>

<p>This list is not necessarily complete. <code>:-)</code></p>

<itemtable>
<item><itemt>Package</itemt>
<itemd>
<p>
The package name. May contain lowercase letters, numbers and
the special characters '.' and '-'. No underscores ('_'), no capital
letters. Required field.
</p>
</itemd></item>

<item><itemt>Version</itemt>
<itemd>
<p>
The upstream version number. Required field.
</p>
</itemd></item>

<item><itemt>Revision</itemt>
<itemd>
<p>
The package revision. Increase this when you make a new
description for the same upstream version. Revision numbers should
start at 1. Required field.
</p>
</itemd></item>

<item><itemt>Type</itemt>
<itemd>
<p>
This can be set to <code>bundle</code>.
Bundle packages are used to group a set of related packages together.
They only have dependencies, but no code and no installed files.
The fields Source, PatchScript, CompileScript, InstallScript and
related ones are ignored for bundle packages.
</p>
</itemd></item>

<item><itemt>Maintainer</itemt>
<itemd>
<p>
The name and e-mail address of the person responsible for the package.
This field is required, and there must be exactly one name and address
in the following format:
</p>
<codeblock>Firstname Lastname &lt;user@host.domain.com&gt;</codeblock>
</itemd></item>

<item><itemt>Depends</itemt>
<itemd>
<p>
A comma-separated list of packages which must be installed before
this package can be built. Currently, only plain package names are
allowed; there is no mechanism to request a specific version of a
package yet.
</p>
</itemd></item>

<item><itemt>Provides</itemt>
<itemd>
<p>
A comma-separated list of package names that this package is
considered to "provide".
If a package named "pine" specifies <code>Provides: mailer</code>,
then any dependency on "mailer" is considered satisfied when "pine" is
installed.
You'll usually also want to name these packages in the "Conflicts" and
the "Replaces" field.
</p>
</itemd></item>

<item><itemt>Conflicts</itemt>
<itemd>
<p>
A comma-separated list of package names that must not be installed at
the same time as this package.
For virtual packages it is allowed to list the names of the provided
packages here; they will be handled appropriately.
</p>
<p>
<em>Note:</em> Fink itself currently ignores this field.
However, it is passed on to dpkg and will be handled accordingly.
In summary, it only effects run-time, not build-time.
</p>
</itemd></item>

<item><itemt>Replaces</itemt>
<itemd>
<p>
This is used together with "Conflicts", when this package not only
takes over the function of the conflicting package, but also has some
common files.
Without this field, dpkg may generate errors when installing the
package because files are still owned by the other package.
It is also a hint that the two packages involved are genuine
alternatives and one can be removed in favor of the other.
</p>
<p>
<em>Note:</em> Fink itself currently ignores this field.
However, it is passed on to dpkg and will be handled accordingly.
In summary, it only effects run-time, not build-time.
</p>
</itemd></item>

<item><itemt>Essential</itemt>
<itemd>
<p>
A boolean value that denotes essential packages. Essential
packages are installed as part of the bootstrap process. All
non-essential packages implicitly depend on the essential ones. dpkg
will refuse to remove essential packages from the system unless
special flags are used to override this.
</p>
</itemd></item>

<item><itemt>Source</itemt>
<itemd>
<p>
An URL to the source tarball. It should be a HTTP or FTP URL, but
Fink doesn't really care - it just passes the URL to wget. This field
supports a special URL scheme for mirrors:
<code>mirror:&lt;mirror-name&gt;:&lt;relative-path&gt;</code>. This will
look up the mirror setting for <i>mirror-name</i> in Fink's
configuration, append the <i>relative-path</i> part and use that as
the actual URL.
</p>
<p>
Before the URL is used, percent expansion takes place.
The value <code>gnu</code> is a shorthand for
<code>mirror:gnu:%n/%n-%v.tar.gz</code>; <code>gnome</code> is a shorthand for
<code>mirror:gnome:stable/sources/%n/%n-%v.tar.gz</code>. The
default is <code>%n-%v.tar.gz</code> (i.e. a manual
download).
</p>
</itemd></item>

<item><itemt>SourceDirectory</itemt>
<itemd>
<p>
Must be used when the tarball expands to a single directory, but
the directory's name is different from the basename of the tarball.
Usually, a tarball named "foo-1.0.tar.gz" will produce a directory
named "foo-1.0". If it produces a directory with a different name,
specify it with this parameter. Percent expansion is performed on this
field.
</p>
</itemd></item>

<item><itemt>NoSourceDirectory</itemt>
<itemd>
<p>
Set this boolean parameter to a true value if the tarball does not
expand to a single directory. Usually, a tarball named "foo-1.0.tar.gz"
will produce a directory named "foo-1.0". If it just unpacks the files
to the current directory, use this parameter and set it to a boolean
true value.
</p>
</itemd></item>

<item><itemt>Source<i>N</i></itemt>
<itemd>
<p>
If a package consists of several tarballs, name them with these
additional fields, starting with N = 2. So, the first tarball (which
should be some kind of "main" tarball) goes into <code>Source</code>, the
second tarball in <code>Source2</code> and so on. The rules are the same
as for Source, only that the "gnu" and "gnome" shortcuts are not
expanded - that would be useless anyway.
</p>
</itemd></item>

<item><itemt>Source<i>N</i>ExtractDir</itemt>
<itemd>
<p>
Normally, an auxillary tarball will be extracted in the same
directory as the main tarball. If you need to extract it in a
specific subdirectory instead, use this field to specify
it. Source2ExtractDir corresponds to the Source2 tarball, as one would
expect. See ghostscript, vim and tetex for examples of
usage.
</p>
</itemd></item>

<item><itemt>UpdateConfigGuess</itemt>
<itemd>
<p>
A boolean value. If true, the files config.guess and config.sub
in the build directory will be replaced with versions that know about
Darwin. This happens in the patch phase and before the PatchScript
is run. <em>Only</em> use this when you know it is necessary,
i.e. when the configure script fails with a "unknown host"
message.
</p>
</itemd></item>

<item><itemt>UpdateLibtool</itemt>
<itemd>
<p>
A boolean value. If true, the files ltconfig and ltmain.sh in the
build directory will be replaced with versions that know about
Darwin. This happens in the patch phase and before the PatchScript
is run. <em>Only</em> use this when you know that the package needs
it. Some packages can be broken by overwriting the libtool scripts
with mismatching versions. See the <link
url="http://fink.sourceforge.net/darwin/libtool.php">libtool
page</link> for further information.
</p>
</itemd></item>

<item><itemt>Patch</itemt>
<itemd>
<p>
The filename of a patch to be applied with <code>patch -p1
&lt;<i>patch-file</i></code>. This should be just a filename; the
appropriate path will be prepended automatically. Percent expansion is
performed on this field, so a typical value is simply
<code>%f.patch</code>. The patch is applied before the PatchScript
is run (if any).
</p>
</itemd></item>

<item><itemt>PatchScript</itemt>
<itemd>
<p>
A list of commands that are run in the patch phase. See the note
on scripts below. This is the place to put commands that patch or
otherwise modify the package. There is no default. Before the
commands are executed, percent expansion takes place (see last
section).
</p>
</itemd></item>

<item><itemt>ConfigureParams</itemt>
<itemd>
<p>
Additional parameters to pass to the configure script. (See
CompileScript for details.)
</p>
</itemd></item>

<item><itemt>CompileScript</itemt>
<itemd>
<p>
A list of commands that are run in the compile phase. See the note
on scripts below. This is the place to put commands that configure and
compile the package. The default is:
</p>
<codeblock>./configure %c
make</codeblock>
<p>
This is appropriate for packages that use GNU autoconf. Before the
commands are executed, percent expansion takes place (see previous
section).
</p>
</itemd></item>

<item><itemt>InstallScript</itemt>
<itemd>
<p>
A list of commands that are run in the install phase. See the note
on scripts below. This is the place to put commands that copy all
necessary files to the stow directory for the package. The default is:
</p>
<codeblock>make install prefix=%i</codeblock>
<p>
The default is appropriate for packages that use GNU autoconf. If the
package supports it, it is preferably to use <code>make install
DESTDIR=%d</code> instead. Before the commands are executed, percent
expansion takes place (see previous section).
</p>
</itemd></item>

<item><itemt>Set<i>ENVVAR</i></itemt>
<itemd>
<p>
Causes certain environment variables to be set in the
compile and install phases. This can be used to pass compiler flags
etc. to configure scripts and Makefiles. Currently supported variables
are: CC, CFLAGS, CPP, CPPFLAGS, CXX, CXXFLAGS, LD, LDFLAGS, LIBS,
MAKE, MFLAGS. The value you specify is subject to the
percent expansion described in the last section. A common example:
</p>
<codeblock>SetCPPFLAGS: -traditional-cpp</codeblock>
<p>
The variables CPPFLAGS and LDFLAGS are special. They default to
<code>-I%p/include</code> and <code>-L%p/lib</code>,
respectively. If you specify a value for one of these, it will be
appended to the default value.
</p>
</itemd></item>

<item><itemt>NoSet<i>ENVVAR</i></itemt>
<itemd>
<p>
When set to a true value, deactivates the default values for
CPPFLAGS and LDFLAGS mentioned above. That is, if you want LDFLAGS to
remain unset, specify <code>NoSetLDFLAGS: true</code> .
</p>
</itemd></item>


<item><itemt>PreInstScript, PostInstScript, PreRmScript, PostRmScript</itemt>
<itemd>
<p>
These fields specify pieces of shell scripts that will be called when
the package is installed, upgraded or removed.
Fink automatically adds a shell script header that calls 'set -e', so
any command that fails will result in instant termination of the
script.
Fink also adds an <code>exit 0</code> at the end.
To indicate an error, exit from the script with a non-zero exit code.
The first parameter (<code>$1</code>) is set to a value indicating
what action is being performed.
Some possible values are <code>install</code>, <code>upgrade</code>,
<code>remove</code> and <code>purge</code>.
</p>
<p>
The scripts are called at the following times:
</p>
<ul>
<li>PreInstScript: When the package is installed for the first time
and before upgrading the package to this version.</li>
<li>PostInstScript: After unpacking and setting up the package.</li>
<li>PreRmScript: Before the package is removed or upgraded to a later
version.</li>
<li>PostRmScript: After the package was removed or upgraded to a later
version.</li>
</ul>
<p>
To make it more clear, an upgrade invokes both the ...Inst scripts of
the new version and the ...Rm scripts of the old version.
Details can be found in the Debian Policy Manual,
<link url="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">Chapter 6</link>.
</p>
<p>
Percent expansion is performed on the scripts.
Commands can generally be called without giving a full path.
</p>
</itemd></item>

<item><itemt>ConfFiles</itemt>
<itemd>
<p>
A space-separated list of files that are user-modifiable configuration
files.
The files must be specified with an absolute path,
e.g. <code>%p/etc/foo.conf</code>.
The named files will receive special treatment by dpkg.
When a package is upgraded and the file has changed both on disk and
in the package, the user is asked which version to use and backups
of the file will be made.
When a package is "remove"d, the configuration files will remain on
disk.
Only a "purge" also removes the configuration files.
</p>
</itemd></item>

<item><itemt>DaemonicFile</itemt>
<itemd>
<p>
<i>Introduced in a post-0.2.2 CVS version.</i>
Gives a service description for <code>daemonic</code>.
<code>daemonic</code> is used by Fink to create and remove
StartupItems for daemon processes (e.g. web servers).
The description will added to the package as a file named
<code>%p/etc/daemons/<i>name</i>.xml</code>, where <i>name</i> is
specified by the DaemonicName field and defaults to the package
name.
Percent expansion is performed on the contents of this field.
Note that you must add <code>daemonic</code> to the dependency list if
your package uses it.
</p>
</itemd></item>

<item><itemt>DaemonicName</itemt>
<itemd>
<p>
<i>Introduced in a post-0.2.2 CVS version.</i>
A name for the <code>daemonic</code> service description file.
See the description of DaemonicFile for details.
</p>
</itemd></item>


<item><itemt>Description</itemt>
<itemd>
<p>
A short description of the package (what is it?). This is a
one-line description that will be displayed in lists, so it must be
short and informative.  Keep it to around 30 to 50 chars. It is not
necessary to repeat the package name in this field - it will always
be displayed in proper context. Required field.
</p>
</itemd></item>

<item><itemt>DescDetail</itemt>
<itemd>
<p>
A more detailed description (what is it, what can I use it for?).
Multiple lines allowed.
</p>
</itemd></item>

<item><itemt>DescUsage</itemt>
<itemd>
<p>
This is for information that is needed to use the package (how do
I use it?). As in "run wmaker.inst once before using WindowMaker".
Multiple lines allowed.
</p>
</itemd></item>

<item><itemt>DescPackaging</itemt>
<itemd>
<p>
Notes about the packaging. Stuff like "patches the Makefile to put
everything in place" goes here. Multiple lines allowed.
</p>
</itemd></item>

<item><itemt>DescPort</itemt>
<itemd>
<p>
Notes that are specific to porting the package to Darwin. Stuff
like "config.guess and libtool scripts are updated, -traditional-cpp
is necessary" goes here. Multiple lines allowed.
</p>
</itemd></item>

<item><itemt>Homepage</itemt>
<itemd>
<p>
The URL of the upstream home page of the package.
</p>
</itemd></item>


<item><itemt>Comment</itemt>
<itemd>
<p>
<em>Obsolete.</em> Was: General comments on the package.
</p>
</itemd></item>

<item><itemt>CommentPort</itemt>
<itemd>
<p>
<em>Obsolete.</em> Was: Comments on the package that are specific to the
Darwin port. Describe what special parameters or patches are
necessary, what doesn't work (yet), etc.
</p>
</itemd></item>

<item><itemt>CommentStow</itemt>
<itemd>
<p>
<em>Obsolete.</em> Was: Comments on the package that apply to using it
with stow. Describe special treatment necessary and potential
problems.
</p>
</itemd></item>

<item><itemt>UsesGettext</itemt>
<itemd>
<p>
<em>Obsolete.</em> gettext is now an essential package and
always available. If the package makes more than casual use of
gettext, you may want to declare a dependency nonetheless.
</p>
</itemd></item>

</itemtable>
</section>

<section name="scripts"><title>Scripts</title>

<p>The PatchScript, CompileScript and InstallScript fields allow you
to specify shell commands to be executed. This is sort of like a shell
script. However, the commands are executed via system(), one by one,
so you can't use constructs that span multiple lines. It also means
the <code>cd</code> commands only affect commands that are on the same
line. This may be fixed one day in the future.</p>
</section>

<section name="patches"><title>Patches</title>

<p>If your package needs a patch to compile on Darwin (or to work with
fink), name the patch with the full package name plus the extension
".patch" and put it in the same directory as the .info file. Specify
either one of these (they are equivalent):</p>
<codeblock>Patch: %f.patch</codeblock>
<codeblock>PatchScript: patch -p1 &lt;%a/%f.patch</codeblock>
<p>These two fields are not mutually-exclusive - you can use both, and
they will both be executed. In that case the PatchScript is executed
last.</p>
</section>


</chapter>


</document>
