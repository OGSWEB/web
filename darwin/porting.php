<?
$title = "Porting";
$cvs_author = '$Author: chrisp $';
$cvs_date = '$Date: 2001/07/16 12:25:22 $';

include "header.inc";
?>


<h1>Porting Unix software to Darwin / Mac OS X</h1>

<p>Here are some hints for porting Unix applications to Darwin. The
information on this page applies to Mac OS X Final (version 10.0) and
equivalent Darwin builds. The information on Public Beta / Darwin 1.2
has been <a href="porting-pb.php">archived</a>.</p>

<h2>The Compiler</h2>

<p>Short story: The compiler is a gcc derivate, but installed as
<tt>cc</tt>; you may have to patch Makefiles. Most packages won't
build shared libraries. If you get errors related to macros, use
the <nobr><tt>-no-cpp-precomp</tt></nobr> option.</p>
<p>Long story: The compiler tool chain in the Mac OS X Developer
Tools is a strange beast. The compiler is based on the gcc 2.95.2
suite, with modifications to support the Objective C language and some
Darwin quirks. The preprocessor (<tt>cpp</tt>) is available in two
versions. One is the standard precompiler (from gcc 2.95.2), the other
one is a special precompiler written by Apple, with support for
precompiled headers. The latter one is used by default, because it is
faster. However, some code doesn't compile with Apple's precompiler,
so you must use the <nobr><tt>-no-cpp-precomp</tt></nobr> option to
get the standard precompiler. (Note: I previously recommended the
<nobr><tt>-traditional-cpp</tt></nobr> option. The semantics of this
option have changed slightly with GCC 3, breaking most packages that
use it. <nobr><tt>-no-cpp-precomp</tt></nobr> has the desired effect
on both the current Developer Tools and future compilers based on GCC
3.)</p>
<p>The assembler says it's based on gas 1.38. The linker is not based
on GNU tools. This is a problem when building shared libraries, as GNU
libtool and configure scripts generated by it don't know how to handle
Apple's linker.</p>

<h2>Host type</h2>

<p>Short story: If configure fails with 'Can't determine host type',
copy config.guess and config.sub from /usr/libexec into the current
directory.</p>
<p>Long story: The GNU world uses a canonical format to specify system
types. It has three parts: cpu type, manufacturer and operating
system. Sometimes a fourth part is added - then the third part denotes
the kernel, while the fourth denotes the operating system. All parts
are lower case and concatenated using dashes. Some examples:
<nobr><tt>i586-pc-linux-gnu</tt></nobr>,
<nobr><tt>hppa1.1-hp-hpux10.20</tt></nobr>,
<nobr><tt>sparc-sun-solaris2.6</tt></nobr>. The host type for Mac OS X
10.0 is <nobr><tt>powerpc-apple-darwin1.3</tt></nobr>.</p>
<p>Many packages that use autoconf want to know the host type of the
system they are compiled on. (Side note: to support cross-compiling
and porting, there are actually three types - the host type, the build
type and the target type. Usually, they're all the same.) You can
either pass the host type to the configure script as a parameter or
you can let it guess.</p>
<p>The configure script uses two companion scripts to determine host
types. <tt>config.guess</tt> tries to guess the host type,
<tt>config.sub</tt> is used to validate and canonicalize the host
type. These scripts are maintained as separate entities, but they are
included in every package that uses them. Until very recently, these
scripts didn't know about Darwin or Mac OS X. If you have a package
that doesn't recognize Darwin, you must replace the config.guess and
config.sub included in the package. Luckily, Apple put working
versions in /usr/libexec, so you can just copy them from there.</p>

<h2>Libraries</h2>

<p>Short story: You can safely remove <nobr><tt>-lm</tt></nobr> from
Makefiles, but you don't need to.</p>
<p>Long story: Mac OS X doesn't have separate libc, libm, libcurses,
libpthread etc. libraries. Instead, they're all part of the system
library, libSystem. (In earlier versions, this actually was the System
framework.) However, Apple placed appropriate symlinks in /usr/lib, so
linking with <nobr><tt>-lm</tt></nobr> will work. The only exception
is <nobr><tt>-lutil</tt></nobr>. On other systems, libutil contains
functions related
to pseudo-terminals and login accounting. These functions are in
libSystem, but there is no symlink to provide a libutil.dylib.</p>

<h2>Shared Libraries / libtool</h2>

<p>Short story: Many packages need patched libtool scripts to build
shared libraries.</p>
<p>Long story: See the <a href="libtool.php">libtool</a> page.</p>


<?
include "footer.inc";
?>
