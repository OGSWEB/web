<?
$title = "Porting";
$cvs_author = '$Author: chrisp $';
$cvs_date = '$Date: 2001/01/08 11:35:16 $';

include "header.inc";
?>


<h2>Porting Unix software to Darwin / Mac OS X</h2>

<p>Here are some hints for porting Unix applications to Darwin.</p>

<h3>The Compiler</h3>

<p>Short story: The compiler is a gcc derivate, but installed as
<tt>cc</tt>; you may have to patch Makefiles. Most packages won't
build shared libraries. If you get errors related to macros, use
the <tt>-traditional-cpp</tt> option.</p>
<p>Long story: The compiler tool chain in the Public Beta Developer
Tools is a strange beast indeed. The compiler is based on gcc, with
modifications to support the Objective C language and some Darwin
quirks. The frontend (<tt>cc</tt>) reports its version as 2.7.2.1. The
actual compiler, however, is based on gcc 2.95.2 (it's in
/usr/libexec/ppc). The preprocessor (<tt>cpp</tt>) is still
different. There are actually two versions - one is the standard
precompiler (version unknown), the other one is a special precompiler
written by Apple, with support for precompiled headers. The latter one
is used by default, because it is faster. However, some code doesn't
compile with Apple's precompiler, so you must use the
<tt>-traditional-cpp</tt> option to get the standard precompiler.</p>
<p>The assembler says it's based on gas 1.38. The linker is not based
on GNU tools (or they hid it <u>very</u> well). This is a problem when
building shared libraries, as GNU libtool and configure scripts
generated by it don't know how to handle Apple's linker.</p>

<h3>Host type</h3>

<p>Short story: If configure fails with 'Can't determine host type',
copy config.guess and config.sub from /usr/libexec into the current
directory.</p>
<p>Long story: The GNU world uses a canonical format to specify system
types. It has three parts: cpu type, manufacturer and operating
system. Sometimes a fourth part is added - then the third part denotes
the kernel, while the fourth denotes the operating system. All parts
are lower case and concatenated using dashes. Some examples:
<tt>i586-pc-linux-gnu</tt>, <tt>hppa1.1-hp-hpux10.20</tt>,
<tt>sparc-sun-solaris2.6</tt>. The host type for Darwin 1.2 and Mac OS
X Public Beta is <tt>powerpc-apple-darwin1.2</tt>.</p>
<p>Many packages that use autoconf want to know the host type of the
system they are compiled on. (Side note: to support cross-compiling
and porting, there are actually three types - the host type, the build
type and the target type. Usually, they're all the same.) You can
either pass the host type to the configure script as a parameter or
you can let it guess.</p>
<p>The configure script uses two companion scripts to determine host
types. <tt>config.guess</tt> tries to guess the host type,
<tt>config.sub</tt> is used to validate and canonicalize the host
type. These scripts are maintained as separate entities, but they are
included in every package that uses them. Until very recently, these
scripts didn't know about Darwin or Mac OS X. If you have a package
that doesn't recognize Darwin, you must replace the config.guess and
config.sub included in the package. Luckily, Apple put working
versions in /usr/libexec, so you can just copy them from there.</p>

<h3>Libraries</h3>

<p>Short story: You can safely remove <tt>-lm</tt> from Makefiles.</p>
<p>Long story: Some libraries commonly found on Unix systems are not
present as separate libraries on Mac OS X. Instead, they are included
in the System framework. What this means is that you don't need to
specify flags like <tt>-lm</tt> to get mathematical
functions. Unfortunately, the linker will still look for a libm
library when you specify <tt>-lm</tt> and fails because there is
none. You must remove the flag from the Makefiles in that case; it is
perfectly safe to do so. The same applies to the curses library -
there is no libcurses or libncurses.</p>

<h3>Shared Libraries / libtool</h3>

<p>Short story: Many packages only build static libraries right
now.</p>
<p>Long story: GNU packages that build libraries use GNU libtool to
hide platform-dependent procedures for library building and
installation. Unfortunately, GNU libtool doesn't know about Darwin
(its linker, that is) and only builds static libraries. Also, dynamic
loading (used e.g. for plugins) isn't available. There are several
patches floating around the 'net, but I haven't found the time to try
them out yet.</p>
<p>Side note: Apple's Developer Tools contain a program also called
libtool, which can be used to build shared libraries. However, this is
either based on a <u>very</u> old version of GNU libtool or completely
unrelated. Anyway, it won't help GNU packages, because the libtool
code is included in the packages themselves.</p>


<?
include "footer.inc";
?>
